d_one <- subset(d.mat, d.mat$mainCond==1)
mean(d_one$acc[d_one$agentCond==1]) #future-you1
sd(d_one$acc[d_one$agentCond==1])
n_o_1 = length(d_one$acc[d_one$agentCond==1]); n_o_1
mean(d_one$acc[d_one$agentCond==2]) #stranger-john
sd(d_one$acc[d_one$agentCond==2])
n_o_2 = length(d_one$acc[d_one$agentCond==2])
mean(d_one$acc[d_one$agentCond==3]) #stranger-bill
sd(d_one$acc[d_one$agentCond==3])
n_o_3 = length(d_one$acc[d_one$agentCond==3])
att_1_o <- t.test(d_one$acc[d_one$agentCond==1 | d_one$agentCond==2] ~ d_one$agentCond[d_one$agentCond==1 | d_one$agentCond==2], var.equal=TRUE, paired=TRUE); att_1_o
att_2_o <- t.test(d_one$acc[d_one$agentCond==1 | d_one$agentCond==3] ~ d_one$agentCond[d_one$agentCond==1 | d_one$agentCond==3], var.equal=TRUE, paired=TRUE); att_2_o
att_3_o <- t.test(d_one$acc[d_one$agentCond==2 | d_one$agentCond==3] ~ d_one$agentCond[d_one$agentCond==2 | d_one$agentCond==3], var.equal=TRUE, paired=TRUE); att_3_o
tes(as.numeric(att_1_o[1]), n_o_1, n_o_2) #cohen's d
tes(as.numeric(att_2_o[1]), n_o_1, n_o_3) #cohen's d
tes(as.numeric(att_3_o[1]), n_o_2, n_o_3) #cohen's d
#one self #2
d_oneAlt <- subset(d.mat, d.mat$mainCond==2)
mean(d_oneAlt$acc[d_oneAlt$agentCond==1]) #future-you2
sd(d_oneAlt$acc[d_oneAlt$agentCond==1])
n_o_1 = length(d_oneAlt$acc[d_oneAlt$agentCond==1]); n_o_1
mean(d_oneAlt$acc[d_oneAlt$agentCond==2]) #stranger-john
sd(d_oneAlt$acc[d_oneAlt$agentCond==2])
n_o_2 = length(d_oneAlt$acc[d_oneAlt$agentCond==2]); n_o_2
mean(d_oneAlt$acc[d_oneAlt$agentCond==3]) #stranger-bill
sd(d_oneAlt$acc[d_oneAlt$agentCond==3])
n_o_3 = length(d_oneAlt$acc[d_oneAlt$agentCond==3]); n_o_3
att_1_alt <- t.test(d_oneAlt$acc[d_oneAlt$agentCond==1 | d_oneAlt$agentCond==2] ~ d_oneAlt$agentCond[d_oneAlt$agentCond==1 | d_oneAlt$agentCond==2], var.equal=TRUE, paired=TRUE); att_1_alt
att_2_alt <- t.test(d_oneAlt$acc[d_oneAlt$agentCond==1 | d_oneAlt$agentCond==3] ~ d_oneAlt$agentCond[d_oneAlt$agentCond==1 | d_oneAlt$agentCond==3], var.equal=TRUE, paired=TRUE); att_2_alt
att_3_alt <- t.test(d_oneAlt$acc[d_oneAlt$agentCond==2 | d_oneAlt$agentCond==3] ~ d_oneAlt$agentCond[d_oneAlt$agentCond==2 | d_oneAlt$agentCond==3], var.equal=TRUE, paired=TRUE); att_3_alt
tes(as.numeric(att_1_alt[1]), n_o_1, n_o_2) #cohen's d
tes(as.numeric(att_2_alt[1]), n_o_1, n_o_3) #cohen's d
tes(as.numeric(att_3_alt[1]), n_o_2, n_o_3) #cohen's d
#two selves
d_two <- subset(d.mat, d.mat$mainCond==3)
mean(d_two$acc[d_two$agentCond==1]) #future-you1
sd(d_two$acc[d_two$agentCond==1])
n_o_1 = length(d_two$acc[d_two$agentCond==1]); n_o_1
mean(d_two$acc[d_two$agentCond==2]) #future-you2
sd(d_two$acc[d_two$agentCond==2])
n_o_2 = length(d_two$acc[d_two$agentCond==2])
mean(d_two$acc[d_two$agentCond==3]) #stranger-bill
sd(d_two$acc[d_two$agentCond==3])
n_o_3 = length(d_two$acc[d_two$agentCond==3])
att_1_b <- t.test(d_two$acc[d_two$agentCond==1 | d_two$agentCond==2] ~ d_two$agentCond[d_two$agentCond==1 | d_two$agentCond==2], var.equal=TRUE, paired=TRUE); att_1_b
att_2_b <- t.test(d_two$acc[d_two$agentCond==1 | d_two$agentCond==3] ~ d_two$agentCond[d_two$agentCond==1 | d_two$agentCond==3], var.equal=TRUE, paired=TRUE); att_2_b
att_3_b <- t.test(d_two$acc[d_two$agentCond==2 | d_two$agentCond==3] ~ d_two$agentCond[d_two$agentCond==2 | d_two$agentCond==3], var.equal=TRUE, paired=TRUE); att_3_b
tes(as.numeric(att_1_b[1]), n_o_1, n_o_2) #cohen's d
tes(as.numeric(att_2_b[1]), n_o_1, n_o_3) #cohen's d
tes(as.numeric(att_3_b[1]), n_o_2, n_o_3) #cohen's d
#------- TOTAL PERFORMANCE--------#
mean(perf.mat$total_perf[perf.mat$mainCond == 1])
sd(perf.mat$total_perf[perf.mat$mainCond == 1])
mean(perf.mat$total_perf[perf.mat$mainCond == 2])
sd(perf.mat$total_perf[perf.mat$mainCond == 2])
mean(perf.mat$total_perf[perf.mat$mainCond == 3])
sd(perf.mat$total_perf[perf.mat$mainCond == 3])
perf_1 <- t.test(perf.mat$total_perf[perf.mat$mainCond == 1 | perf.mat$mainCond == 3] ~ perf.mat$mainCond[perf.mat$mainCond == 1 | perf.mat$mainCond == 3], var.equal=TRUE, paired=FALSE); perf_1
perf_2 <- t.test(perf.mat$total_perf[perf.mat$mainCond == 2 | perf.mat$mainCond == 3] ~ perf.mat$mainCond[perf.mat$mainCond == 2 | perf.mat$mainCond == 3], var.equal=TRUE, paired=FALSE); perf_2
tes(as.numeric(perf_1[1]), length(workers), length(workers)) #cohen's d
tes(as.numeric(perf_2[1]), length(workers), length(workers)) #cohen's d
((mean(perf.mat$total_perf[perf.mat$mainCond == 3]) - mean(perf.mat$total_perf[perf.mat$mainCond == 1])) + (mean(perf.mat$total_perf[perf.mat$mainCond == 3]) - mean(perf.mat$total_perf[perf.mat$mainCond == 2])))/2
p_mat <- c(att_1_o[3], att_1_alt[3], att_1_b[3], perf_1[3], perf_2[3])
for(i in 1:length(p_mat)) {
if(p_mat[i] > 0.10) {
star_mat[i] = 'ns'
}
else if( (p_mat[i] < 0.10) & (p_mat[i] > 0.05) ) {
star_mat[i] = '\u2020'
}
else if( (p_mat[i] < 0.05) & (p_mat[i] > 0.01) ) {
star_mat[i] = '*'
}
else if( (p_mat[i] < 0.01) & (p_mat[i] > 0.001) ) {
star_mat[i] = '**'
}
else if(p_mat[i] < 0.001) {
star_mat[i] = '***'
}
}
##================================================================================================================
##PREPARE DATA FOR PLOTTING##
##================================================================================================================
#make d mat for plotting: condition 1
d_mat_plot_one <- array(0,dim=c(3, 5))
colnames(d_mat_plot_one) <- c('cond','mean','sd','n','sem')
for(i in 1:length(unique(agentCond_n))) {
d_mat_plot_one[i, ] <- c(i, mean(d_one$acc[d_one$agentCond == i]), sd(d_one$acc[d_one$agentCond == i]), length(d_one$acc[d_one$agentCond == i]), 0)
d_mat_plot_one[i, 5] <- d_mat_plot_one[i,3]/sqrt(d_mat_plot_one[i,4])
}
d_mat_plot_one
d.one <- as.data.frame(d_mat_plot_one, stringsAsFactors=FALSE); d.one
#make d mat for plotting: condition 1 alternative
d_mat_plot_alt <- array(0,dim=c(3, 5))
colnames(d_mat_plot_alt) <- c('cond','mean','sd','n','sem')
perf_mat_plot_alt <- as.data.frame(d_mat_plot_alt, stringsAsFactors=FALSE); d_mat_plot_alt
for(i in 1:length(unique(agentCond_n))) {
d_mat_plot_alt[i, ] <- c(i, mean(d_oneAlt$acc[d_oneAlt$agentCond == i]), sd(d_oneAlt$acc[d_oneAlt$agentCond == i]), length(d_oneAlt$acc[d_oneAlt$agentCond == i]), 0)
d_mat_plot_alt[i, 5] <- d_mat_plot_alt[i,3]/sqrt(d_mat_plot_alt[i,4])
}
d_mat_plot_alt
d.oneAlt <- as.data.frame(d_mat_plot_alt, stringsAsFactors=FALSE); d.oneAlt
#make d mat for plotting: condition 2
d_mat_plot_two <- array(0,dim=c(3, 5))
colnames(d_mat_plot_two) <- c('cond','mean','sd','n','sem')
perf_mat_plot_two <- as.data.frame(d_mat_plot_two, stringsAsFactors=FALSE); d_mat_plot_two
for(i in 1:length(unique(agentCond_n))) {
d_mat_plot_two[i, ] <- c(i, mean(d_two$acc[d_two$agentCond == i]), sd(d_two$acc[d_two$agentCond == i]), length(d_two$acc[d_two$agentCond == i]), 0)
d_mat_plot_two[i, 5] <- d_mat_plot_two[i,3]/sqrt(d_mat_plot_two[i,4])
}
d_mat_plot_two
d.two <- as.data.frame(d_mat_plot_two, stringsAsFactors=FALSE); d.two
# make total performance mat for plotting
perf_mat_plot <- array(0,dim=c(3, 5))
colnames(perf_mat_plot) <- c('cond','mean','sd','n','sem')
perf_mat_plot <- as.data.frame(perf_mat_plot, stringsAsFactors=FALSE); perf_mat_plot
for(i in 1:length(unique(condNum))) {
perf_mat_plot[i, ] <- c(i, mean(perf.mat$total_perf[perf.mat$mainCond == i]), sd(perf.mat$total_perf[perf.mat$mainCond == i]), length(perf.mat$total_perf[perf.mat$mainCond == i]), 0)
perf_mat_plot[i,5] <- perf_mat_plot[i,3]/sqrt(perf_mat_plot[i,4])
}
perf_mat_plot
#=============================================================================================================
##PLOT##
##================================================================================================================
#identified with future1
p1.11<-ggplot(d.one,aes(x=factor(cond),y=mean,fill=factor(cond))) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar", face="bold")+
coord_cartesian(ylim=c(0, 1))+
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_blank()) +
theme(legend.title = element_blank())+
theme(axis.ticks.x = element_blank())+
theme_classic()
p1.111<-p1.11+scale_fill_discrete(name = "", labels = c ("True\nYou", "Stranger\nJohn", "Stranger\nBill")) +
xlab ("") + ylab ("") +
theme(legend.text = element_text(size = "16", face = "plain")) +
geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge", size=1.5)+
geom_signif(data=d.one,
aes(xmin=1, xmax=2, annotations=star_mat[1], y_position=0.8),
textsize = 12, vjust = 0.3,
manual=TRUE, size=1.5) +
#ggtitle ("Self #1") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = 26))
p1.1111<-p1.111+ theme(axis.text.x = element_blank()) +
theme(axis.ticks.x = element_blank()) +
theme(axis.line = element_line(colour = '#585858', size = 1.5), axis.text.y = element_blank(), axis.ticks.length=unit(.25, "cm"), axis.ticks = element_line(colour = "black", size = 1.5)) + scale_fill_manual(values=c("#802520", "#78a973", "#3e70bd"))
#identified with future2
p1.12<-ggplot(d.oneAlt,aes(x=factor(cond),y=mean,fill=factor(cond))) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar", face="bold")+
coord_cartesian(ylim=c(0, 1))+
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_blank()) +
theme(legend.title = element_blank()) +
theme(axis.ticks.x = element_blank()) +
theme_classic()
p1.112<-p1.12+scale_fill_discrete(name = "", labels = c ("Surface\nYou", "Stranger\nJohn", "Stranger\nBill")) +
xlab ("") + ylab ("") +
theme(legend.text = element_text(size = "16", face = "plain")) +
geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge", size=1.5)+
geom_signif(data=d.one,
aes(xmin=1, xmax=2, annotations=star_mat[2], y_position=0.8),
textsize = 12, vjust = -0.1,
manual=TRUE, size=1.5) +
#ggtitle ("Self #2") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = 26))
p1.1112<-p1.112+ theme(axis.text.x = element_blank())+
theme(axis.ticks.x = element_blank()) +
theme(axis.line = element_line(colour = '#585858', size = 1.5), axis.text.y = element_blank(), axis.ticks.length=unit(.25, "cm"), axis.ticks = element_line(colour = "black", size = 1.5)) + scale_fill_manual(values=c("#d95b5f", "#78a973", "#3e70bd"))
p1.14<-ggplot(d.two,aes(x=factor(cond),y=mean,fill=factor(cond))) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar",face="bold")+
coord_cartesian(ylim=c(0, 1))+
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_blank()) +
theme(legend.title = element_blank()) +
theme(axis.ticks.x = element_blank()) +
theme_classic()
p1.114<-p1.14+scale_fill_discrete(name = "", labels = c ("True\nYou", "Surface\nYou", "Stranger\nJohn")) +
xlab ("") + ylab ("") +
theme(legend.text = element_text(size = "16", face = "plain")) +
geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge", size=1.5)+
geom_signif(data=d.two,
aes(xmin=1, xmax=2, annotations=star_mat[3], y_position=0.8),
textsize = 12, vjust = -0.1,
manual=TRUE, size=1.5) +
#ggtitle ("Two Selves") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = 26))
p1.1114<-p1.114+theme(axis.text.x = element_blank())+
theme(axis.ticks.x = element_blank())+
theme(axis.line = element_line(colour = '#585858', size = 1.5), axis.text.y = element_blank(), axis.ticks.length=unit(.25, "cm"), axis.ticks = element_line(colour = "black", size = 1.5)) + scale_fill_manual(values=c("#802520", "#d95b5f", "#78a973"))
#total performance
p1.15<-ggplot(perf_mat_plot,aes(x=factor(cond),y=mean)) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar",face="bold")+
coord_cartesian(ylim=c(0, 4))+
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_blank()) +
theme(legend.title = element_blank())+
theme(axis.ticks.x = element_blank(), margin = margin(t = 3))+
theme_classic()
p1.115<-p1.15+scale_fill_discrete(name = "", labels = c ("Original", "Copy", "Stranger")) +
xlab ("") + ylab ("") +
geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge", size=1.5)+
geom_signif(data=perf_mat_plot,
aes(xmin=1, xmax=3, annotations=star_mat[4], y_position=3.0),
textsize = 12, vjust = -0.1,
manual=TRUE, size=1.5) +
geom_signif(data=perf_mat_plot,
aes(xmin=2, xmax=3, annotations=star_mat[5], y_position=2.1),
textsize = 12, vjust = -0.1,
manual=TRUE, size=1.5) +
#ggtitle ("Total Performance:\n One Self v. Two Selves") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = 22))+
theme(axis.text.y = element_text(size = 26))
p1.1115<-p1.115+ theme(axis.text.x = element_blank())+
theme(axis.line = element_line(colour = '#585858', size = 1.5), axis.ticks.x = element_blank(), axis.ticks.length=unit(.25, "cm"), axis.ticks = element_line(colour = "black", size = 1.5))
figure <- ggarrange(p1.1111, p1.1112, p1.1114, p1.1115, nrow=1,ncol=4,common.legend = FALSE, legend="none", vjust = -1.0)
png("../fig1.png", width = 8640 * 2.5/6, height = 2560 * 2.5/6, res=300)
figure
dev.off()
#Julian De Freitas, 2020
#Analysis script for De Freitas, Rips, & Alvarez - Limited and flexible self memories
#Experiment 4a
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
if(TRUE) {
filenames_old <- list.files(pattern=('*txt'))
# Rename all files in the files list, and rename them by renaming the part before the first "_" with the integer in order
# Also, save the part that we renamed as well as the integers we assigned them to in a csv file, so that it's easy to see which file corresponds to which participant
for(i in 1:length(files)) {
# Print "Renaming [worker_id] to [num]"
print(paste0("Renaming ", files[i], " to ", i))
#file.rename(files[i], paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i]))))
#files[i] <- paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i])))
# If there are files with the same worker_id, rename them to the same integer
if(i > 1) {
print(paste(substr(filenames_old[i], 1, regexpr("_", filenames_old[i])-1), substr(filenames_old[i-1], 1, regexpr("_", filenames_old[i-1])-1)))
if(substr(filenames_old[i], 1, regexpr("_", filenames_old[i])-1) == substr(filenames_old[i-1], 1, regexpr("_", filenames_old[i-1])-1)) {
file.rename(files[i], paste0(i-1, substr(files[i], regexpr("_", files[i]), nchar(files[i]))))
files[i] <- paste0(i-1, substr(files[i], regexpr("_", files[i]), nchar(files[i])))
}
else {
file.rename(filenames_old[i], paste0(i, substr(filenames_old[i], regexpr("_", filenames_old[i]), nchar(filenames_old[i]))))
files[i] <- paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i])))
}
}
else {
file.rename(filenames_old[i], paste0(i, substr(filenames_old[i], regexpr("_", filenames_old[i]), nchar(filenames_old[i]))))
files[i] <- paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i])))
}
}
# Also anonymize the 'workerID' field in each file to the integer we assigned it to, and save the file
for(i in 1:length(files)) {
myJSON <- fromJSON(files[i])
# We should save the myJSON$workerID as the integer before the first "_"
w_num <- substr(files[i], 1, regexpr("_", files[i])-1)
print(paste0(files[i], " -- ", w_num))
myJSON$workerID <- w_num
# Change workerId's in the trialStructs as well
myJSON$trialStruct['workerId'] <- rep(w_num, dim(myJSON$trialStruct['workerId'])[1])
# Write the text into files[i]
write(toJSON(myJSON, na = "string"), files[i])
}
worker_ids <- c()
nums <- c()
for(i in 1:length(filenames_old)) {
worker_ids <- c(worker_ids, substr(filenames_old[i], 1, regexpr("_", filenames_old[i]) - 1))
nums <- c(nums, substr(files[i], 1, regexpr("_", files[i]) - 1))
}
filenames <- as.data.frame(cbind(worker_ids, nums))
colnames(filenames) <- c('worker_id', 'integer')
# Remove NA column
filenames <- filenames[filenames$worker_id != 'NA',]
filenames$`NA`<- NULL
write.csv(filenames, 'filenames_e4a.csv')
}
#Julian De Freitas, 2020
#Analysis script for De Freitas, Rips, & Alvarez - Limited and flexible self memories
#Experiment 4b
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
#Julian De Freitas, 2020
#Analysis script for De Freitas, Rips, & Alvarez - Limited and flexible self memories
#Experiment 4b
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
#Julian De Freitas, 2020
#Analysis script for De Freitas, Rips, & Alvarez - Limited and flexible self memories
#Experiment 4b
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
#Julian De Freitas, 2020
#Analysis script for De Freitas, Rips, & Alvarez - Limited and flexible self memories
#Experiment 4b
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
#Julian De Freitas, 2020
#Analysis script for De Freitas, Rips, & Alvarez - Limited and flexible self memories
#Experiment 4b
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
#Julian De Freitas, 2020
#Analysis script for De Freitas, Rips, & Alvarez - Limited and flexible self memories
#Experiment 4b
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
#Julian De Freitas, 2020
#Analysis script for De Freitas, Rips, & Alvarez - Limited and flexible self memories
#Experiment 4b
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
