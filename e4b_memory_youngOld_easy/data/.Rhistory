theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = 22))+
theme(axis.text.y = element_text(size = 24))
p1.1115<-p1.115+ theme(axis.text.x = element_blank())+
theme(axis.ticks.x = element_blank())
quartz()
figure<-ggarrange(p1.1111,p1.1112, p1.1114,p1.1115, nrow=1,ncol=4,common.legend = FALSE, legend="top", vjust = -1.0)
annotate_figure(figure,top = text_grob("Experiment 6: Past and Future Selves", face = "bold", size = 27),
left = text_grob("d' Performance", color="black", face ="plain",size=27, rot=90))
##===============================================================================================================
##END##
##================================================================================================================
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The capacity limit of personal identity
#Experiment 12
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Documents/github/juliandefreitas/serial_self/e12_memory_youngOld_hard_v3/data")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
#check that we have equal numbers for each condition
table(data$label)
table(data$agentCond)
table(data$selfCond)
table(data$selfCond)[1]/30
table(data$selfCond)[2]/30
table(data$selfCond)[3]/30
##================================================================================================================
##EXCLUSIONS##
##================================================================================================================
### perform exclusions: attention, comprehension, and rts < 100 (this ends up performing both subject and trial)
### note, we exclude based on mean accuracy further below
### note, data$comp_mental_content actually refers to comp_number_copies
## (1) attention and comprehension
data <- subset(data,(data$attentionMCQ=="0" & data$comp=="B"))
length(unique(data$workerId)) #1 subjects
for (i in 1:dim(data)[1]) {
if( (data$selfCond[i] == 1)) {
if(data$comp2[i] == "B") {
data$exclude[i] = 0
}
else {
data$exclude[i] = 1
}
}
else if(data$selfCond[i] == 2) {
if(data$comp2[i] == "C") {
data$exclude[i] = 0
}
else {
data$exclude[i] = 1
}
}
if( (data$selfCond[i] == 3)) {
if(data$comp2[i] == "B") {
data$exclude[i] = 0
}
else {
data$exclude[i] = 1
}
}
}
data <- subset(data, data$exclude == 0)
length(unique(data$workerId)) #1 subjects
data$rt[is.na(data$rt)] <- 0
## (2) < 55 accuracy or RTs < 100ms
#mark which trials had reasonable rts
for(i in 1:dim(data)[1]) {
if(data$rt[i] >= 100) {
data$badRt[i] = 0
}
else {
data$badRt[i] = 1
}
}
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
perf_thresh <- 0.40
cond <- as.factor(data$selfCond)
trial_thresh <- 0.5
ss_excl_mat <- array(0,dim=c(length(workers),2))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop')
#if their accuracy < 55% or total bad RTs > 50% of trials, exclude them from dataset
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
if( (ss_excl_mat[i,1] < perf_thresh) | (ss_excl_mat[i,2] > trial_thresh) ) {
data <- subset(data,data$workerId != workers[i])
}
}
ss_excl_mat
#check it worked
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
ss_excl_mat <- array(0,dim=c(length(workers),2))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop')
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
}
ss_excl_mat
length(unique(data$workerId)) #124 subjects
dim(data)
##================================================================================================================
##PREP DATA FOR ANALYSIS##
##================================================================================================================
### get identity ratings for each subject
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
n_aft_excl <- length(workers); n_aft_excl
n_excl <- n_bef_excl - n_aft_excl; n_excl
age <- as.numeric(data$age); mean(age,na.rm = TRUE)
gender <- as.factor(data$sex); table(gender)[1]/sum(table(gender))
identity_bef <- data$identity_fetus
identity_aft <- data$identity_pvs
iden_mat <- array(0,dim=c(length(workers),5))
colnames(iden_mat) <- c('before', 'after','zeros','ltm_diff', 'total_perf')
for(i in 1:length(workers)) {
iden_mat[i,] <- c( mean(identity_bef[worker==workers[i]]), mean(identity_aft[worker==workers[i]]),0, 0, 0)
}
iden.mat <- as.data.frame(iden_mat, stringsAsFactors=FALSE); iden.mat
#assign variable names
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
numTrials <- dim(data)[1]
matchCond <- as.factor(data$matchCond)
agentCond <- as.factor(data$agentCond)
condNum <- as.factor(data$selfCond)
#create numeric version of condition
for(i in 1:length(agentCond)) {
if(condNum[i] == 1) {
if(agentCond[i] == 'young-you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-bill') {
data$agentCond_n[i] = 3
}
}
else if(condNum[i] == 2) {
if(agentCond[i] == 'young-you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'old-you') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 3
}
condNum[i] <- 3
}
else if(condNum[i] == 3) {
if(agentCond[i] == 'old-you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-bill') {
data$agentCond_n[i] = 3
}
condNum[i] <- 2
}
}
agentCond_n <- as.factor(data$agentCond_n)
ans <- as.factor(data$ans)
corrAns <- as.factor(data$corrAns)
rts <- log(as.numeric(data$rt))
agentConds_n <- as.factor(unique(agentCond_n))
#create matrix for collecting d prime-relevant values, and rts
d_mat <- array(0,dim=c(3*length(workers), 5))
colnames(d_mat) <- c('worker', 'mainCond', 'agentCond', 'acc', 'rt')
d.mat <- as.data.frame(d_mat, stringsAsFactors=FALSE); d.mat
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
mean_acc <- mean(acc_use[worker==workers[i] & agentCond_n==j])
rt <- mean(rts[worker==workers[i] & agentCond_n==j], na.rm=TRUE)
d.mat[counter,] <- c(workers[i], unique(condNum[worker==workers[i]]), j, mean_acc, rt)
counter = counter + 1
}
}
# collect total performance and performance difference (cond 1 - 2) for each subject
perf_mat <- array(0, dim=c(length(workers), 3))
colnames(perf_mat) <- c('mainCond', 'perf_diff', 'total_perf')
perf.mat <- as.data.frame(perf_mat, stringsAsFactors=FALSE); perf.mat
for(i in 1:length(workers)) {
perf.mat[i,1] <- unique(d.mat$mainCond[d.mat$worker==i])
if(unique(d.mat$mainCond[d.mat$worker==i]) == 1) {
#performance for original you - performance for stranger John
perf.mat[i,2] <- d.mat$acc[d.mat$worker==i & d.mat$agentCond == 1] - d.mat$acc[d.mat$worker==i & d.mat$agentCond == 2]
}
else if(unique(d.mat$mainCond[d.mat$worker==i]) == 2) {
#best of performance for original or copy - performance for stranger John
perf.mat[i,2] <- max(d.mat$acc[d.mat$worker==i & d.mat$agentCond == 1], d.mat$acc[d.mat$worker==i & d.mat$agentCond == 2]) - d.mat$acc[d.mat$worker==i & d.mat$agentCond == 3]
}
perf.mat[i,3] <- d.mat$acc[d.mat$worker==i & d.mat$agentCond == 1] + d.mat$acc[d.mat$worker==i & d.mat$agentCond == 2] + d.mat$acc[d.mat$worker==i & d.mat$agentCond == 3]
}
#mat of liking ratings
data2 <- data[order(data$cat),]
image_cat <- as.factor(data2$cat)
pref <- as.factor(data2$preference)
pref_n <- as.numeric(pref)
worker <- as.factor(data2$workerId)
workers <- as.factor(unique(worker))
condNum <- as.factor(data2$selfCond)
pref_mat <- array(0,dim=c(length(workers), 3))
colnames(pref_mat) <- c('worker', 'mainCond', 'pref')
pref.mat <- as.data.frame(pref_mat, stringsAsFactors=FALSE); pref.mat
for(i in 1:length(workers)) {
corr <- cor.test(pref_n[worker==workers[i] & data2$agentCond_n==1], pref_n[worker==workers[i] & data2$agentCond_n==2])
pref.mat[i,] <- c(workers[i], unique(condNum[worker==workers[i]]), as.numeric(corr[4]))
}
pref.mat[is.na(pref.mat)] <- 0
##================================================================================================================
##ANALYSIS##
##================================================================================================================
#---- HOW CORRELATED ARE LIKING RATINGS FOR SELF AND COPY
pref_hard <- pref.mat$pref[pref.mat$mainCond == 3]
t.test(pref_hard, var.equal=TRUE, paired=FALSE)
mean(pref_hard) #should be positively correlated
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The capacity limit of personal identity
#Experiment 13
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Documents/github/juliandefreitas/serial_self/e13_memory_youngOld_easy/data")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
#check that we have equal numbers for each condition
table(data$label)
table(data$agentCond)
table(data$selfCond)
table(data$selfCond)[1]/30
table(data$selfCond)[2]/30
table(data$selfCond)[3]/30
##================================================================================================================
##EXCLUSIONS##
##================================================================================================================
### perform exclusions: attention, comprehension, and rts < 100 (this ends up performing both subject and trial)
### note, we exclude based on mean accuracy further below
### note, data$comp_mental_content actually refers to comp_number_copies
## (1) attention and comprehension
data <- subset(data,(data$attentionMCQ=="0" & data$comp=="B"))
length(unique(data$workerId)) #1 subjects
for (i in 1:dim(data)[1]) {
if( (data$selfCond[i] == 1)) {
if(data$comp2[i] == "B") {
data$exclude[i] = 0
}
else {
data$exclude[i] = 1
}
}
else if(data$selfCond[i] == 2) {
if(data$comp2[i] == "C") {
data$exclude[i] = 0
}
else {
data$exclude[i] = 1
}
}
if( (data$selfCond[i] == 3)) {
if(data$comp2[i] == "B") {
data$exclude[i] = 0
}
else {
data$exclude[i] = 1
}
}
}
data <- subset(data, data$exclude == 0)
length(unique(data$workerId)) #1 subjects
data$rt[is.na(data$rt)] <- 0
## (2) < 55 accuracy or RTs < 100ms
#mark which trials had reasonable rts
for(i in 1:dim(data)[1]) {
if(data$rt[i] >= 100) {
data$badRt[i] = 0
}
else {
data$badRt[i] = 1
}
}
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
perf_thresh <- 0.40
cond <- as.factor(data$selfCond)
trial_thresh <- 0.5
ss_excl_mat <- array(0,dim=c(length(workers),2))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop')
#if their accuracy < 55% or total bad RTs > 50% of trials, exclude them from dataset
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
if( (ss_excl_mat[i,1] < perf_thresh) | (ss_excl_mat[i,2] > trial_thresh) ) {
data <- subset(data,data$workerId != workers[i])
}
}
ss_excl_mat
#check it worked
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
ss_excl_mat <- array(0,dim=c(length(workers),2))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop')
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
}
ss_excl_mat
length(unique(data$workerId)) #124 subjects
dim(data)
##================================================================================================================
##PREP DATA FOR ANALYSIS##
##================================================================================================================
### get identity ratings for each subject
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
n_aft_excl <- length(workers); n_aft_excl
n_excl <- n_bef_excl - n_aft_excl; n_excl
age <- as.numeric(data$age); mean(age,na.rm = TRUE)
gender <- as.factor(data$sex); table(gender)[1]/sum(table(gender))
identity_bef <- data$identity_fetus
identity_aft <- data$identity_pvs
iden_mat <- array(0,dim=c(length(workers),5))
colnames(iden_mat) <- c('before', 'after','zeros','ltm_diff', 'total_perf')
for(i in 1:length(workers)) {
iden_mat[i,] <- c( mean(identity_bef[worker==workers[i]]), mean(identity_aft[worker==workers[i]]),0, 0, 0)
}
iden.mat <- as.data.frame(iden_mat, stringsAsFactors=FALSE); iden.mat
#assign variable names
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
numTrials <- dim(data)[1]
matchCond <- as.factor(data$matchCond)
agentCond <- as.factor(data$agentCond)
condNum <- as.factor(data$selfCond)
#create numeric version of condition
for(i in 1:length(agentCond)) {
if(condNum[i] == 1) {
if(agentCond[i] == 'young-you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-bill') {
data$agentCond_n[i] = 3
}
}
else if(condNum[i] == 2) {
if(agentCond[i] == 'young-you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'old-you') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 3
}
data$selfCond[i] <- 3
condNum[i] <- 3
}
else if(condNum[i] == 3) {
if(agentCond[i] == 'old-you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-bill') {
data$agentCond_n[i] = 3
}
data$selfCond[i] <- 2
condNum[i] <- 2
}
}
agentCond_n <- as.factor(data$agentCond_n)
ans <- as.factor(data$ans)
corrAns <- as.factor(data$corrAns)
rts <- log(as.numeric(data$rt))
agentConds_n <- as.factor(unique(agentCond_n))
#create matrix for collecting d prime-relevant values, and rts
d_mat <- array(0,dim=c(3*length(workers), 5))
colnames(d_mat) <- c('worker', 'mainCond', 'agentCond', 'acc', 'rt')
d.mat <- as.data.frame(d_mat, stringsAsFactors=FALSE); d.mat
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
mean_acc <- mean(acc_use[worker==workers[i] & agentCond_n==j])
rt <- mean(rts[worker==workers[i] & agentCond_n==j], na.rm=TRUE)
d.mat[counter,] <- c(workers[i], unique(condNum[worker==workers[i]]), j, mean_acc, rt)
counter = counter + 1
}
}
# collect total performance and performance difference (cond 1 - 2) for each subject
perf_mat <- array(0, dim=c(length(workers), 3))
colnames(perf_mat) <- c('mainCond', 'perf_diff', 'total_perf')
perf.mat <- as.data.frame(perf_mat, stringsAsFactors=FALSE); perf.mat
for(i in 1:length(workers)) {
perf.mat[i,1] <- unique(d.mat$mainCond[d.mat$worker==i])
if(unique(d.mat$mainCond[d.mat$worker==i]) == 1) {
#performance for original you - performance for stranger John
perf.mat[i,2] <- d.mat$acc[d.mat$worker==i & d.mat$agentCond == 1] - d.mat$acc[d.mat$worker==i & d.mat$agentCond == 2]
}
else if(unique(d.mat$mainCond[d.mat$worker==i]) == 2) {
#best of performance for original or copy - performance for stranger John
perf.mat[i,2] <- max(d.mat$acc[d.mat$worker==i & d.mat$agentCond == 1], d.mat$acc[d.mat$worker==i & d.mat$agentCond == 2]) - d.mat$acc[d.mat$worker==i & d.mat$agentCond == 3]
}
perf.mat[i,3] <- d.mat$acc[d.mat$worker==i & d.mat$agentCond == 1] + d.mat$acc[d.mat$worker==i & d.mat$agentCond == 2] + d.mat$acc[d.mat$worker==i & d.mat$agentCond == 3]
}
#mat of liking ratings
data2 <- data[order(data$cat),]
image_cat <- as.factor(data2$cat)
pref <- as.factor(data2$preference)
pref_n <- as.numeric(pref)
worker <- as.factor(data2$workerId)
workers <- as.factor(unique(worker))
condNum <- as.factor(data2$selfCond)
pref_mat <- array(0,dim=c(length(workers), 3))
colnames(pref_mat) <- c('worker', 'mainCond', 'pref')
pref.mat <- as.data.frame(pref_mat, stringsAsFactors=FALSE); pref.mat
for(i in 1:length(workers)) {
corr <- cor.test(pref_n[worker==workers[i] & data2$agentCond_n==1], pref_n[worker==workers[i] & data2$agentCond_n==2])
pref.mat[i,] <- c(workers[i], unique(condNum[worker==workers[i]]), as.numeric(corr[4]))
}
pref.mat[is.na(pref.mat)] <- 1
##================================================================================================================
##ANALYSIS##
##================================================================================================================
#---- HOW CORRELATED ARE LIKING RATINGS FOR SELF AND COPY
pref_easy <- pref.mat$pref[pref.mat$mainCond == 3]
t.test(pref_easy, var.equal=TRUE, paired=FALSE)
mean(pref_easy) #should be positively correlated
